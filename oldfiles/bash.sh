#!/bin/bash

# Dynamically sets up and runs a Kathara lab generated by
# automation.py and processed by tacata.py, ensuring routers
# have correct FRR configuration and permissions.
# Starts Kathara without opening terminals for each device.

# --- Main Execution ---

# 1. Clean and Delete Previous Lab (if any)
echo "Cleaning and deleting previous lab environment..."
# Try cleaning first (ignore errors if lab doesn't exist)
cd lab && sudo kathara lclean && cd .. > /dev/null 2>&1 || true
# Force remove the lab directory
sudo rm -rf lab

# 2. Generate lab.confu using Python script & Capture Router Count
echo "Running automation.py to generate lab configuration..."
# Run python script, tee its output to the console, AND capture output in a variable
# PIPESTATUS[0] gets the exit code of the first command in the pipe (python3)
AUTOMATION_OUTPUT=$(sudo python3 automation.py | tee /dev/tty)
AUTOMATION_EXIT_CODE=${PIPESTATUS[0]}

if [ $AUTOMATION_EXIT_CODE -ne 0 ]; then
    echo "[ERROR] automation.py failed." >&2
    exit 1
fi

# Extract the number of routers generated from the script's output
# Look for the specific line "ROUTERS_GENERATED=N" and get the number after "="
NUM_ROUTERS=$(echo "$AUTOMATION_OUTPUT" | grep '^ROUTERS_GENERATED=' | cut -d'=' -f2)

# Validate extracted number (must be a non-zero integer)
if ! [[ "$NUM_ROUTERS" =~ ^[1-9][0-9]*$ ]]; then
    echo "[ERROR] Could not determine a valid number of routers generated by automation.py." >&2
    echo "Expected 'ROUTERS_GENERATED=N' (where N > 0) in output:" >&2
    echo "$AUTOMATION_OUTPUT" >&2
    exit 1
fi
echo "--- Detected $NUM_ROUTERS routers to configure ---"

# 3. Process lab.confu using Tacata
echo "Running tacata.py to generate Kathara files..."
# Use -f to force overwrite if Tacata creates the lab dir itself
# Use -v for verbose output from Tacata
sudo python3 tacata.py -f -v
if [ $? -ne 0 ]; then
    echo "[ERROR] tacata.py failed." >&2
    exit 1
fi

# 4. (Optional) Move global startup file if generated
GLOBAL_STARTUP_FILE="startup"
if [ -f "$GLOBAL_STARTUP_FILE" ]; then
    echo "Moving global '$GLOBAL_STARTUP_FILE' file to lab/..."
    sudo mv "$GLOBAL_STARTUP_FILE" lab/
else
    echo "Global '$GLOBAL_STARTUP_FILE' not found, skipping move."
fi

# 5. Inject FRR setup into Router Startup Scripts (Using detected NUM_ROUTERS)
echo "Configuring routers (permissions, FRR daemons, FRR start)..."
# Use the detected number of routers in the loop
for i in $(seq 1 $NUM_ROUTERS); do
    ROUTER_STARTUP_FILE="lab/router${i}.startup"
    echo "Processing $ROUTER_STARTUP_FILE..."

    if [ -f "$ROUTER_STARTUP_FILE" ]; then
        TMP_CMDS=$(mktemp) # Create a temporary file for commands

        # Prepare the commands to append
        cat << EOF > "$TMP_CMDS"

# --- Commands Added by bash.sh ---

# Fix permissions for Tacata-generated Quagga config files
echo "Fixing permissions for /etc/quagga configs..."
mkdir -p /etc/quagga
touch /etc/quagga/zebra.conf /etc/quagga/ripd.conf # Ensure files exist
chown root:frr /etc/quagga                     # Set dir ownership (group frr)
chmod 775 /etc/quagga                          # Allow frr group access (rwx, rwx, r-x)
chown root:frr /etc/quagga/*.conf              # Set file ownership (group frr)
chmod 640 /etc/quagga/*.conf                   # Set file permissions (owner rw, group r, other none)

# Update /etc/frr/daemons to enable ripd/zebra and set config paths
echo "Updating /etc/frr/daemons..."
# Enable daemons (replace =no with =yes if found)
sed -i 's/^ripd=no/ripd=yes/' /etc/frr/daemons
sed -i 's/^zebra=no/zebra=yes/' /etc/frr/daemons
# Comment out default options lines if they exist, to avoid conflicts
# Using # as delimiter in sed to avoid issues with paths containing /
sed -i 's#^ripd_options=.*#\#&#' /etc/frr/daemons
sed -i 's#^zebra_options=.*#\#&#' /etc/frr/daemons

# Append the correct settings ensuring they are active
# Ensure the 'yes' setting exists if it wasn't changed from 'no' or wasn't present
grep -qxF 'ripd=yes' /etc/frr/daemons || echo 'ripd=yes' >> /etc/frr/daemons
grep -qxF 'zebra=yes' /etc/frr/daemons || echo 'zebra=yes' >> /etc/frr/daemons
# Append the options pointing to the correct config files
# Use grep to avoid adding duplicate option lines if script is run multiple times on same files
grep -qxF 'zebra_options=" --daemon -f /etc/quagga/zebra.conf"' /etc/frr/daemons || echo 'zebra_options=" --daemon -f /etc/quagga/zebra.conf"' >> /etc/frr/daemons
grep -qxF 'ripd_options=" --daemon -f /etc/quagga/ripd.conf"' /etc/frr/daemons || echo 'ripd_options=" --daemon -f /etc/quagga/ripd.conf"' >> /etc/frr/daemons

# NOTE: IP Forwarding is assumed to be enabled within the Docker image

# Start FRR service using the init script
echo "Starting FRR service..."
if [ -x /usr/lib/frr/frrinit.sh ]; then
    /usr/lib/frr/frrinit.sh start
else
    echo "[ERROR] FRR init script /usr/lib/frr/frrinit.sh not found or not executable." >&2
fi
# --- End Commands Added by bash.sh ---
EOF

        # Append the commands using sudo (tee preserves permissions, redirects stdout)
        sudo tee -a "$ROUTER_STARTUP_FILE" < "$TMP_CMDS" > /dev/null
        if [ $? -ne 0 ]; then
             echo "[ERROR] Failed to append commands to $ROUTER_STARTUP_FILE. Check permissions." >&2
        else
             echo "Successfully appended commands to $ROUTER_STARTUP_FILE."
        fi

        # Clean up the temporary file
        rm "$TMP_CMDS"
    else
         echo "[WARN] Startup file not found: $ROUTER_STARTUP_FILE. Skipping FRR setup for this router."
    fi
done
echo "Router configuration complete."

# 6. Navigate into Lab Directory and Start Simulation
echo "Changing directory to 'lab'..."
cd lab || { echo "[ERROR] Failed to enter 'lab' directory. Exiting..."; exit 1; }

echo "Running kathara lstart silently (no auto-terminals)..."
# --- MODIFIED LINE ---
# Use the --noterminals flag as indicated by the usage output
sudo kathara lstart --noterminals
# --- END MODIFIED LINE ---

# Check the exit status of kathara lstart
if [ $? -ne 0 ]; then
    echo "[ERROR] 'kathara lstart' failed. Check Kathara output and lab files." >&2
    exit 1
fi

echo "--------------------------------------"
echo "Kathara lab started successfully!"
echo "You can connect to devices manually using 'kathara connect <device_name>'"
echo "Setup script finished."
echo "--------------------------------------"

exit 0
