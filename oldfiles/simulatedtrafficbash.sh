#!/bin/bash

# Dynamically sets up and runs a Kathara lab generated by
# automation.py (which includes traffic graph simulation) and
# processed by tacata.py. Ensures routers have correct FRR config
# and permissions. Moves traffic data for the traffic_server container.
# Injects client/server identity/startup commands into .startup files from cmd_snippets/.
# Starts Kathara silently (no auto-terminals).

# --- Configuration ---
SNIPPET_DIR="cmd_snippets" # Directory where automation.py saves .cmds files

# --- Main Execution ---

# 1. Clean and Delete Previous Lab (if any)
echo "Cleaning and deleting previous lab environment..."
cd lab && sudo kathara lclean && cd .. > /dev/null 2>&1 || true
sudo rm -rf lab
# Also remove the snippet directory if it exists from a previous failed run
sudo rm -rf "$SNIPPET_DIR"

# 2. Generate lab.confu & Command Snippets using Python script & Capture Router Count
echo "Running automation.py (includes graph sim & Kathara config generation)..."
AUTOMATION_OUTPUT=$(sudo python3 automation.py | tee /dev/tty)
AUTOMATION_EXIT_CODE=${PIPESTATUS[0]}
if [ $AUTOMATION_EXIT_CODE -ne 0 ]; then echo "[ERROR] automation.py failed." >&2; exit 1; fi

NUM_ROUTERS=$(echo "$AUTOMATION_OUTPUT" | grep '^ROUTERS_GENERATED=' | cut -d'=' -f2)
if ! [[ "$NUM_ROUTERS" =~ ^[1-9][0-9]*$ ]]; then
    echo "[ERROR] Could not determine valid number of routers from automation.py." >&2
    exit 1
fi
echo "--- Detected $NUM_ROUTERS routers to configure ---"

# 3. Process lab.confu using Tacata (This should now succeed)
echo "Running tacata.py to generate Kathara files..."
sudo python3 tacata.py -f -v
if [ $? -ne 0 ]; then echo "[ERROR] tacata.py failed." >&2; exit 1; fi

# 4. Move Traffic Data File
TRAFFIC_DATA_FILE="traffic_data.json"; SHARED_DIR="lab/shared"
echo "Attempting to move traffic data..."
if [ -f "$TRAFFIC_DATA_FILE" ]; then
    sudo mkdir -p "$SHARED_DIR"
    sudo mv "$TRAFFIC_DATA_FILE" "$SHARED_DIR/"
    if [ $? -ne 0 ]; then echo "[WARN] Failed to move $TRAFFIC_DATA_FILE."; fi
    # No need to echo success, mv will show error if it fails significantly
else echo "[WARN] $TRAFFIC_DATA_FILE not found."; fi

# 5. (Optional) Move global startup file
GLOBAL_STARTUP_FILE="startup"
if [ -f "$GLOBAL_STARTUP_FILE" ]; then sudo mv "$GLOBAL_STARTUP_FILE" lab/; fi

# 6. Configure Routers
echo "Configuring routers (permissions, FRR daemons, FRR start)..."
for i in $(seq 1 $NUM_ROUTERS); do
    ROUTER_STARTUP_FILE="lab/router${i}.startup"
    if [ -f "$ROUTER_STARTUP_FILE" ]; then
        TMP_CMDS=$(mktemp)
        # --- Router HEREDOC Start ---
        cat << EOF > "$TMP_CMDS"

# --- Commands Added by bash.sh for router ---
echo "Fixing permissions for /etc/quagga configs..."
mkdir -p /etc/quagga; touch /etc/quagga/zebra.conf /etc/quagga/ripd.conf
chown root:frr /etc/quagga; chmod 775 /etc/quagga
chown root:frr /etc/quagga/*.conf; chmod 640 /etc/quagga/*.conf
echo "Updating /etc/frr/daemons..."
sed -i 's/^ripd=no/ripd=yes/' /etc/frr/daemons; sed -i 's/^zebra=no/zebra=yes/' /etc/frr/daemons
sed -i 's#^ripd_options=.*#\#&#' /etc/frr/daemons; sed -i 's#^zebra_options=.*#\#&#' /etc/frr/daemons
grep -qxF 'ripd=yes' /etc/frr/daemons || echo 'ripd=yes' >> /etc/frr/daemons
grep -qxF 'zebra=yes' /etc/frr/daemons || echo 'zebra=yes' >> /etc/frr/daemons
grep -qxF 'zebra_options=" --daemon -f /etc/quagga/zebra.conf"' /etc/frr/daemons || echo 'zebra_options=" --daemon -f /etc/quagga/zebra.conf"' >> /etc/frr/daemons
grep -qxF 'ripd_options=" --daemon -f /etc/quagga/ripd.conf"' /etc/frr/daemons || echo 'ripd_options=" --daemon -f /etc/quagga/ripd.conf"' >> /etc/frr/daemons
echo "Starting FRR service..."
if [ -x /usr/lib/frr/frrinit.sh ]; then /usr/lib/frr/frrinit.sh start
else echo "[ERROR] FRR init script not found." >&2; fi
# --- End Router Commands ---
EOF
        # --- Router HEREDOC End ---
        sudo tee -a "$ROUTER_STARTUP_FILE" < "$TMP_CMDS" > /dev/null
        if [ $? -ne 0 ]; then echo "[ERROR] Failed appending to $ROUTER_STARTUP_FILE." >&2; fi
        rm "$TMP_CMDS"
    fi
done
echo "Router configuration loop complete."

# 7. Configure Clients AND Servers from Snippets
echo "Configuring clients/servers (injecting startup commands from $SNIPPET_DIR)..."
# ** MODIFICATION: Find files in $SNIPPET_DIR **
CMD_FILES_FOUND=$(find "$SNIPPET_DIR" -maxdepth 1 -name '*.cmds' -print)

if [ -z "$CMD_FILES_FOUND" ]; then
    echo "[WARN] No *.cmds files found in $SNIPPET_DIR to configure clients/servers."
else
    for CMD_FILE in $CMD_FILES_FOUND; do
        # Extract machine name (e.g., cluster1_machine1 from cmd_snippets/cluster1_machine1.cmds)
        MACHINE_NAME=$(basename "$CMD_FILE" .cmds)
        TARGET_STARTUP_FILE="lab/${MACHINE_NAME}.startup"
        # echo "Processing $TARGET_STARTUP_FILE..." # Less verbose

        if [ -f "$TARGET_STARTUP_FILE" ]; then
            # Append the content of the snippet file to the target's startup file
            sudo tee -a "$TARGET_STARTUP_FILE" < "$CMD_FILE" > /dev/null
            if [ $? -ne 0 ]; then
                 echo "[ERROR] Failed appending commands to $TARGET_STARTUP_FILE from $CMD_FILE." >&2
            else
                 # Remove the snippet file after successful append
                 sudo rm "$CMD_FILE" # Use sudo to remove file potentially created by sudo python3
                 # echo "Successfully appended commands to $TARGET_STARTUP_FILE." # Less verbose
            fi
        else
            echo "[WARN] Target startup file not found: $TARGET_STARTUP_FILE. Cannot append commands from $CMD_FILE."
            # Decide if we should keep or remove the orphaned command file
            # sudo rm "$CMD_FILE"
        fi
    done
fi
# ** MODIFICATION: Clean up snippet directory if empty, or report if not **
if [ -d "$SNIPPET_DIR" ]; then
    if [ -z "$(ls -A $SNIPPET_DIR)" ]; then
        # Directory is empty, remove it
        echo "Removing empty $SNIPPET_DIR directory."
        sudo rm -r "$SNIPPET_DIR"
    else
        echo "[WARN] $SNIPPET_DIR directory is not empty after processing. Check for leftover files."
    fi
fi
echo "Client/Server configuration loop complete."


# 8. Navigate into Lab Directory and Start Simulation
echo "Changing directory to 'lab'..."
cd lab || { echo "[ERROR] Failed to enter 'lab' directory."; exit 1; }

echo "Running kathara lstart silently..."
sudo kathara lstart --noterminals
if [ $? -ne 0 ]; then echo "[ERROR] 'kathara lstart' failed."; exit 1; fi

# --- Final Message ---
echo "--------------------------------------"
echo "Kathara lab started successfully!"
# Note: traffic_server_ip is not defined in bash, get from output or hardcode here
echo "Traffic Server should be running at 192.168.254.200 (inside lab)."
echo "You can connect using 'kathara connect <device>'"
echo "Setup finished."
echo "--------------------------------------"

exit 0
